/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';
import { StatusRepository } from './offline/StatusRepository';
import { OfflineContentRepository } from './offline/OfflineContentRepository';
import { SeverityLevel } from '@microsoft/applicationinsights-web';
import { request } from 'http';
import { updateOfflineContentDatabase } from './offline/offlineContentUpdates/updateOfflineDatabase';
import { addUpdateRequestToDatabase } from './offline/addUpdateRequestToDatabase';
import { OfflineUpdateRequest } from './offline/OfflineUpdateRequest';
import removeBaseUrlFromUrl from './utils/removeBaseUrlFromUrl';

declare const self: ServiceWorkerGlobalScope;

const offlineContentRepository = new OfflineContentRepository();

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
    // Return false to exempt requests from being fulfilled by index.html.
    ({ request, url }: { request: Request; url: URL }) => {
        // If this isn't a navigation, skip.
        if (request.mode !== 'navigate') {
            return false;
        }

        // If this is a URL that starts with /_, skip.
        if (url.pathname.startsWith('/_')) {
            return false;
        }

        // If this looks like a URL for a resource, because it contains
        // a file extension, skip.
        if (url.pathname.match(fileExtensionRegexp)) {
            return false;
        }

        // Return true to signal that we want to use the handler.
        return true;
    },
    createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
    // Add in any other file extensions or routing criteria as needed.
    ({ url }) =>
        url.origin === self.location.origin && url.pathname.endsWith('.png'),
    // Customize this strategy as needed, e.g., by changing to CacheFirst.
    new StaleWhileRevalidate({
        cacheName: 'images',
        plugins: [
            // Ensure that once this runtime cache reaches a maximum size the
            // least-recently used images are removed.
            new ExpirationPlugin({ maxEntries: 50 }),
        ],
    })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
    if (event.data && event.data.type === 'SKIP_WAITING') {
        self.skipWaiting();
    }
});

async function IsOnlineMode(): Promise<boolean | undefined> {
    const statusRepository = new StatusRepository();
    try {
        const status = await statusRepository.getStatus();
        console.log('IsOnlineMode: leser fra database', status);
        if (status !== undefined) {
            return !status.status;
        }
        console.error('IsOnlineMode. Klarer ikke Ã¥ hente status.');
        return true;
    } catch (err) {
        console.log(err);
    }
}

const handleFetchGET = async (event: FetchEvent): Promise<any> => {
    const url = removeBaseUrlFromUrl(event.request.url);
    if (!(await IsOnlineMode())) {
        // Try to get the response from a cache.
        const entity = await offlineContentRepository.getByApiPath(url);
        if (entity) {
            //todo: Ta bort log
            console.log(
                'Interceptor: Returnerer objekt fra database. ' + url,
                entity.responseObj
            );
            const blob = new Blob([JSON.stringify(entity.responseObj)]);
            return new Response(blob);
        } else {
            console.error(
                'Offline-mode. Entity for given url is not found in local database. Will try to fetch.',
                url
            );
            return await fetch(event.request);
        }
    } else {
        console.error('Interceptor: online mode.');
        return await fetch(event.request);
    }
};

const handleFetchUpdate = async (event: FetchEvent): Promise<Response> => {
    if (await IsOnlineMode()) {
        console.log(
            'Interceptor: handleFetchUpdate. Online mode',
            event.request.url
        );
        return await fetch(event.request);
    } else {
        console.log(
            'Interceptor: handleFetchupdate. Offline mode.',
            event.request.url
        );

        const offlinePostRequest = await OfflineUpdateRequest.build(
            event.request
        );
        await updateOfflineContentDatabase(offlinePostRequest);
        await addUpdateRequestToDatabase(offlinePostRequest);

        return new Response();
    }
};

self.addEventListener('fetch', function (event: FetchEvent) {
    console.log('Intercepter fetch', event.request.url);
    const url = event.request.url;
    const method = event.request.method;
    console.log('insterncpet Get, ', method);
    if (url.includes('/api') && method == 'GET') {
        event.respondWith(handleFetchGET(event));
    } else if ((method == 'POST' || method == 'PUT') && url.includes('/api')) {
        event.respondWith(handleFetchUpdate(event));
    }
});
